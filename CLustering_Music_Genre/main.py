"""
We are using Generative Adversarial Networks (GANs) which consist of two
neural networks:
    1. Generator: generates new data samples.
    2. Discriminator: evaluates whether a given data sample is real(from
    the training data) or fake (generated by the generator).

A GAN consists of following key components:
    - Noise Vector: a random input vector is fed into the generator
    - Generator: A neural network that transforms noise vector into a data sample
    - Discriminator: A neural network that classifies input data as real or fake
"""


import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from sklearn.cluster import KMeans
import plotly.graph_objects as go

# Load data
data = pd.read_csv("Spotify-2000.csv")

# Drop unnecessary column
if "Index" in data.columns:
    data = data.drop("Index", axis=1)

# Select relevant features
data2 = data[["Beats Per Minute (BPM)", "Loudness (dB)", "Liveness", "Valence", "Acousticness", "Speechiness"]]

# Normalize data
scaler = MinMaxScaler()
data2_scaled = scaler.fit_transform(data2)

# Apply KMeans clustering
kmeans = KMeans(n_clusters=10, random_state=42, n_init=10)
clusters = kmeans.fit_predict(data2_scaled)

# Add cluster labels to the dataset
data["Music Segments"] = clusters + 1  # Ensure labels start from 1

# Map clusters to names
cluster_map = {i: f"Cluster {i}" for i in range(1, 11)}
data["Music Segments"] = data["Music Segments"].map(cluster_map)

# Check required columns exist for 3D scatter plot
if "Energy" in data.columns and "Danceability" in data.columns:
    PLOT = go.Figure()

    for cluster_name in data["Music Segments"].unique():
        cluster_data = data[data["Music Segments"] == cluster_name]
        PLOT.add_trace(go.Scatter3d(
            x=cluster_data["Beats Per Minute (BPM)"],
            y=cluster_data["Energy"],
            z=cluster_data["Danceability"],
            mode="markers",
            marker=dict(size=6, line_width=1),
            name=cluster_name
        ))

    PLOT.update_traces(hovertemplate='Beats Per Minute (BPM): %{x} <br>Energy: %{y} <br>Danceability: %{z}')
    PLOT.update_layout(
        width=800, height=800, autosize=True, showlegend=True,
        scene=dict(
            xaxis=dict(title='Beats Per Minute (BPM)', titlefont_color='black'),
            yaxis=dict(title='Energy', titlefont_color='black'),
            zaxis=dict(title='Danceability', titlefont_color='black')
        ),
        font=dict(family='Gilroy', color='black', size=12)
    )

    PLOT.show()
else:
    print("Error: 'Energy' and 'Danceability' columns are missing from the dataset.")


